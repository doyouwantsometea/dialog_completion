{"topic":{"0":"N\/A","1":"N\/A","2":"N\/A","3":"N\/A","4":"N\/A","5":"N\/A","6":"N\/A","7":"N\/A","8":"N\/A","9":"N\/A","10":"N\/A","11":"N\/A","12":"N\/A","13":"N\/A","14":"N\/A","15":"N\/A","16":"N\/A","17":"N\/A","18":"N\/A","19":"N\/A","20":"N\/A"},"dialog_lvl":{"0":"eli5","1":"eli5","2":"eli5","3":"eli5","4":"eli5","5":"eli5","6":"eli5","7":"eli5","8":"eli5","9":"eli5","10":"eli5","11":"eli5","12":"eli5","13":"eli5","14":"eli5","15":"eli5","16":"eli5","17":"eli5","18":"eli5","19":"eli5","20":"eli5"},"role":{"0":"Explainee","1":"Explainer","2":"Explainee","3":"Explainer","4":"Explainee","5":"Explainer","6":"Explainee","7":"Explainer","8":"Explainee","9":"Explainer","10":"Explainee","11":"Explainer","12":"Explainee","13":"Explainer","14":"Explainee","15":"Explainer","16":"Explainee","17":"Explainer","18":"Explainee","19":"Explainer","20":"Explainee"},"turn_num_tokens":{"0":12,"1":136,"2":21,"3":20,"4":16,"5":86,"6":16,"7":113,"8":19,"9":68,"10":14,"11":174,"12":9,"13":16,"14":7,"15":69,"16":12,"17":111,"18":5,"19":4,"20":10},"turn":{"0":"ELI5: How does a computer learn those first few steps of computing?","1":"You seem to really want things to inherently \"mean something\". Heck, these words don't even \"mean something\" unless we both agree that they do.  Its no different for computers, you can look up the [ASCII Codes](https:\/\/en.wikipedia.org\/wiki\/ASCII#Printable_characters) for each letter, where they're each allocated a specific number, written in binary. Its no different than saying A=1, B=2, C=3... and so on. Everything is just strings of numbers that we've agreed to interpret a particular way. The image on your screen is made of groups of 3 numbers, for how much red, green, and blue each pixel should be. An audio file is a series of numbers corresponding to how far a speaker cone should be moved backward and forward at any given moment. A program is just some instructions that take numbers and turn them into other numbers.","2":"But how does the computer do that thing. How does it go from processing the numbers to making a thing happen","3":"Processing numbers *is* making the thing happen. There's no magic. What are you looking for? What answer would satisfy you?","4":"I want to know how the numbers the computer does become a thing on a screen.","5":"I touched on that already. The computer processes a bunch of numbers, and then sends values to your screen in the format [R,G,B] where R, G, and B are 3 numbers that range from 0 to 255 or from 00000000 to 11111111 in binary. The Monitor turns on each pixel to the corresponding value (take a magnifying glass and look at your monitor, there really are tiny red, green, and blue lights making up the screen!) and that is interpreted by your brain as an image.","6":"Shouldn't that limit resolution? And how does the monitor know that the numbers mean the color?","7":"Why would that limit the resolution? You just send a set of 3 numbers for each pixel. For 1080p, thats 1920 x 1080 pixels x 3 numbers x 60 frames per second=373,248,000 numbers per second, or in more familiar units 3.73 MegaBytes per Second. That's what a MegaByte *is* 1 million 8bit numbers. Considering most PCs today have GigaBytes of memory and Terabytes of storage--1000 and 1million times larger respectively--video display isn't that taxing.  The monitor ultimately just turns lights on and off. The final number goes to each red\/green\/blue subpixel and controls a power supply, regulating how much voltage it puts out, which ultimately controls how much light is allowed through or blocked.","8":"How does it send to each? How does it do shades? How many transistors are we talking about here?","9":"&gt;How does it send to each?  Lots and lots of wires.  &gt;How does it do shades?  As I said, each number ranges from 0 to 255, where 0 is \"black\" and 255 is \"as bright as it can\".  &gt;How many transistors are we talking about here?  Tens of billions. At this point, transistors in modern chips have features 5 nanometers across, that's only about 45 silicon atoms across. They really pack them in.","10":"What's the difference between digital and analog, then, if they both work like this?","11":"Digital devices are designed to produce 1 of only 2 states ON and OFF. These are meant to be completely distinct, with no in between.  Analog devices still use transistors, but they allow for many shades of grey between 0 current an maximum current.   Transistors work like switches, with current flowing from the Source to the Drain, controlled by the Gate. This lets a tiny voltage at the Gate control a much larger current, like how a tiny valve can completely shut off a pipe.   Digital devices are designed to only have their gate ON or OFF. Analog devices can take a range of voltages through the gate that gradually turns on the current flowing through the device. This lets a tiny signal be amplified into a much bigger one, wiggling the \"valve\" creates a much stronger wiggle in the current through the \"pipe\", and this can turn the tiny electromagnetic field of a radio wave into something you can hear, with a little external power supplied by something else to drive the main current.","12":"How does a digital produce only one of two?","13":"The output from one transistor is strong enough to completely max out the Gate of another.","14":"Why was this not possible in analog?","15":"Its not *impossible* its just not what its meant to do. Digital isn't \"better\" than analog, they just do completely different things. You use analog to handle real-world signals that can take a range of values, you use digital to do math and process information. Ultimately, you translate back and forth as needed, like in the case of a monitor taking a digital signal to produce an analog image.","16":"So analog has more than 1 and 0? How does that work","17":"&gt;Analog devices still use transistors, but they allow for many shades of grey between 0 current an maximum current. Transistors work like switches, with current flowing from the Source to the Drain, controlled by the Gate. This lets a tiny voltage at the Gate control a much larger current, like how a tiny valve can completely shut off a pipe. Analog devices can take a range of voltages through the gate that gradually turns on the current flowing through the device.   Remember, 1 and 0 are just what we call ON and OFF. Its all a matter of how much current is flowing. We get to choose how to interpret that.","18":"But what do they do?","19":"I just told you.","20":"How do you interpret something that's neither on nor off?"}}