{"topic":{"0":"N\/A","1":"N\/A","2":"N\/A","3":"N\/A","4":"N\/A","5":"N\/A","6":"N\/A","7":"N\/A","8":"N\/A","9":"N\/A","10":"N\/A","11":"N\/A"},"dialog_lvl":{"0":"eli5","1":"eli5","2":"eli5","3":"eli5","4":"eli5","5":"eli5","6":"eli5","7":"eli5","8":"eli5","9":"eli5","10":"eli5","11":"eli5"},"role":{"0":"Explainee","1":"Explainer","2":"Explainee","3":"Explainer","4":"Explainee","5":"Explainer","6":"Explainee","7":"Explainer","8":"Explainee","9":"Explainer","10":"Explainee","11":"Explainer"},"turn_num_tokens":{"0":12,"1":82,"2":14,"3":75,"4":30,"5":105,"6":46,"7":196,"8":14,"9":62,"10":11,"11":80},"turn":{"0":"ELI5: How does a computer learn those first few steps of computing?","1":"The \"spots\" are always \"touching\". In other words, the wires are always physically connected. The way programmers change what data (electrical signals) is fed into those wires is by storing instructions into memory. How does the CPU know to retrieve those instructions and execute them? Ultimately it's hardwired to do so as part of its design and manufacture. Ever heard of the BIOS on a motherboard? That's the program permanently stored in Read Only Memory (ROM) that kicks off that whole process.","2":"So it's a section of memory that tells the computer to read the memory?","3":"BIOS is a program written to a ROM memory chip at the motherboard factory, that provides the initial instructions to the CPU. This includes initialising all the connected hardware, and eventually telling the CPU to start loading instructions from some storage media (which ideally contains an operating system). We call this process *booting*. The CPU is already hard-wired as part of its design, to load this BIOS program from the motherboard it's plugged in to.","4":"How do the instructions make it do something, though. How do we get from 1s and 0s becoming 6 through math to \"computer do this\"? How does the transition work?","5":"The CPU is designed so that if you feed it certain \"numbers\" (the binary numbers are just for human usability - it's all just a series of electrical signals to the CPU) it will perform certain operations. Some of those operations expect additional numbers to be input as part of the instruction (usually, addresses of memory that contain the data). This is all just based on the complex physical arrangement of the transistors and other components within the CPU.  We have a lookup table of what numbers represent what instructions. It's called an **instruction set**. A popular one is x86, which you can read about [here](https:\/\/en.wikipedia.org\/wiki\/X86_instruction_listings#Original_8086\/8088_instructions).","6":"&gt;it will perform certain operations  How does it do that? How does it know to do that? I know it's a machine and doesnt really \"know\" anything, but you know what I mean. How does it take the number 6 it calculated and turn that into action","7":"The CPU is designed that way based on the arrangement of transistors and other components. Feed it a \"6\" and it will add the next two numbers. Feed it an \"8\" and it will store a number into memory. How exactly the transistors are arranged to do so is not even remotely ELI5, and the people who know it are paid millions for their expertise. If you want to see what it looks like inside a CPU you can watch [this video](https:\/\/www.youtube.com\/watch?v=Fxv3JoS1uY8).  The best I can do for ELI5: using transistors you can build logic gates. Using logic gates you can build logical functions. Transistors can also control which logic gates get activated based on a given input. You change which transistors are activated by sending signals to certain CPU pins in a certain order. The CPU is designed such that it would automatically read instructions from certain pins when powered on (which is where the BIOs\/boot process comes in). [Transistors to gates](https:\/\/www.cs.bu.edu\/~best\/courses\/modules\/Transistors2Gates\/).  If you have the basic building blocks to form transistors and\/or logic gates, you can build a fully functional computer, which is how people have simulated computers inside other software such as Minecraft or Factorio.","8":"When you hear \"x input is converted to y output\", how is it converted","9":"A function. If the function is y=x\\*2, then inputting 4 will result in 8.  Programs are kinds of functions that (usually) take input, process it, and provide some kind of output. While computers only work with numbers, it's up to the program to interpret what that number means. They aren't always literally numbers that need to be displayed as text on a monitor.","10":"How does the computer take 8 and turn it into pixels","11":"That process has already been explained to you in [another comment](https:\/\/www.reddit.com\/r\/explainlikeimfive\/comments\/gilmgj\/eli5_how_does_a_computer_learn_those_first_few\/fqgpkp3\/).  You seem to be under the assumption that every result calculated by the CPU is literally turned into pixels. That's clearly not the case, computers calculate all sorts of things for different purposes. The software needs to determine what to do with the result. In the case that the result needs to be displayed on screen, the software will tell the monitor how to do so (via the graphics processor)."}}