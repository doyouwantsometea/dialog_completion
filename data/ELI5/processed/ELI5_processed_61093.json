{"topic":{"0":"N\/A","1":"N\/A","2":"N\/A","3":"N\/A","4":"N\/A","5":"N\/A","6":"N\/A","7":"N\/A"},"dialog_lvl":{"0":"eli5","1":"eli5","2":"eli5","3":"eli5","4":"eli5","5":"eli5","6":"eli5","7":"eli5"},"role":{"0":"Explainee","1":"Explainer","2":"Explainee","3":"Explainer","4":"Explainee","5":"Explainer","6":"Explainee","7":"Explainer"},"turn_num_tokens":{"0":8,"1":23,"2":25,"3":118,"4":17,"5":58,"6":95,"7":49},"turn":{"0":"ELI5 - Halting Problem and the Self-Referential Proof","1":"It clear how P uses M; P calls M like you would call any other function or module in another piece of code","2":"My apologies, I don't know enough about coding to know what calling a function or module means.  Assume that I know zero about programming.","3":"Basically, you can write a function such as M (if it existed) completely separately from any other code, and then freely use that function in other pieces of code, just like you would other functions, like sine, cosine, multiply, divide etc. So in this case you call M, and P is the input. M looks over P (just in case this is what was confusing you, M is not *contained* in P, it is only *called* in P, so you aren't having to deal with loops of Ms), including the part where P must decide whether to halt or enter the infinite loop, and then makes it's prediction. P then does the opposite, and you know the rest","4":"I'm sorry to be a broken record--I don't know what functions are in the context of coding.","5":"The only way I can really describe it is with an example; so sin(x) would be a function that takes x as it's input, calculates the sine of x, and outputs that. We didn't have to program the whole calculation, because we have a function, sin() that is already written that we can call to do it instead.","6":"Would len( ) be an example of a function?  I vaguely recall that one from a Visual Basic book that I tried to read many years ago; I think it accepts a string and tells you the length of the strength (i.e., how many characters the string contains - don't remember whether it counts whitespace).  Obviously the MANNER in which len( ) actually works (i.e., how it counts the length of a string) is way beyond anything I could comprehend because it probably involves some kind of complicated data structure or other formula.","7":"yes, exactly! M is being applied here the exact same way you would apply something like len()- and we don't need to worry about specifics of M the same way you didn't need to worry the specifics of len(), only how you use it- not how it worked underneath"}}